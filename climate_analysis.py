# -*- coding: utf-8 -*-
"""climate analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aGI9WbKtLSY_ugWjJ5L4RqamFn46_Sum
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/daily_data.csv")
df.head()

df.shape

df.isnull().sum()

df.describe()

unique_counts=df.nunique()
print(unique_counts)

df.columns

df.info()

print(df.dtypes)

"""CORRELATION HEATMAP"""

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
columns = ['STATION', 'DATE', 'REPORT_TYPE', 'SOURCE', 'BackupElements',
       'BackupElevation', 'BackupEquipment', 'BackupLatitude',
       'BackupLongitude', 'BackupName', 'DailyAverageDewPointTemperature',
       'DailyAverageDryBulbTemperature', 'DailyAverageRelativeHumidity',
       'DailyAverageSeaLevelPressure', 'DailyAverageStationPressure',
       'DailyAverageWetBulbTemperature', 'DailyAverageWindSpeed',
       'DailyCoolingDegreeDays', 'DailyDepartureFromNormalAverageTemperature',
       'DailyHeatingDegreeDays', 'DailyMaximumDryBulbTemperature',
       'DailyMinimumDryBulbTemperature', 'DailyPeakWindDirection',
       'DailyPeakWindSpeed', 'DailyPrecipitation', 'DailySnowDepth',
       'DailySnowfall', 'DailySustainedWindDirection',
       'DailySustainedWindSpeed', 'Sunrise', 'Sunset',
       'WindEquipmentChangeDate']
df[columns] = df[columns].apply(pd.to_numeric, errors='coerce')
correlation_matrix = df[columns].corr()
plt.figure(figsize=(16, 12))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""DISTRIBUTION"""

sns.set_style("ticks")
numerical_columns=df[['DailyAverageDewPointTemperature','DailyAverageDryBulbTemperature','DailyAverageRelativeHumidity','DailyAverageSeaLevelPressure','DailyAverageStationPressure','DailyAverageWetBulbTemperature',]]
for column in numerical_columns.columns:
  plt.figure(figsize=(10,6))
  sns.histplot(df[column],kde=True)
  plt.title(f'Distribution of [column]')
  plt.show()

"""AVERAGE CLIMATIC CONDITIONS"""

columns_to_plot = ['DailyAverageDewPointTemperature',
           'DailyAverageDryBulbTemperature', 'DailyAverageRelativeHumidity',
           'DailyAverageSeaLevelPressure', 'DailyAverageStationPressure',
           'DailyAverageWetBulbTemperature', 'DailyAverageWindSpeed']
plt.figure(figsize=(20, 15))
colors = ['orange', 'purple', 'brown', 'pink', 'skyblue', 'green']
for i, (column, color) in enumerate(zip(columns_to_plot, colors), start=1):
    plt.subplot(3,2, i)
    plt.hist(df[column], color=color, bins=20)
    plt.title(column)
    plt.xlabel(column.split('Daily', 1)[-1].split('Value', 1)[-1])
    plt.ylabel('Frequency')
    plt.tight_layout()
plt.show()

"""WEATHER PARAMETERS"""

import matplotlib.pyplot as plt
parameters = ['DailyAverageDewPointTemperature', 'DailyAverageDryBulbTemperature', 'DailyAverageRelativeHumidity',
              'DailyAverageSeaLevelPressure', 'DailyAverageStationPressure', 'DailyAverageWetBulbTemperature',
              'DailyAverageWindSpeed']
values = [df[param].iloc[0] for param in parameters]
plt.figure(figsize=(12, 8))
plt.bar(parameters, values, color=['blue', 'green', 'orange', 'red', 'purple', 'brown', 'gray'])
plt.title('Weather Parameters for a Given Day')
plt.xlabel('Parameter')
plt.ylabel('Value')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""SEA LEVEL CLIMATE"""

df['DATE'] = pd.to_datetime(df['DATE'])
plt.figure(figsize=(10, 6))
plt.plot(df['DATE'], df['DailyAverageSeaLevelPressure'], color='blue')
plt.title('Daily Average Sea Level Pressure')
plt.xlabel('DATE')
plt.ylabel('Sea Level Pressure (hPa)')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""AVERAGE METEOROLOGICAL PARAMETERS"""

import matplotlib.pyplot as plt
plt.figure(figsize=(12, 8))
df[''] = pd.to_datetime(df['DATE'])
plt.plot(df['DATE'], df['DailyAverageDewPointTemperature'], label='Dew Point Temperature (°F)', color='blue')
plt.plot(df['DATE'], df['DailyAverageDryBulbTemperature'], label='Dry Bulb Temperature (°F)', color='red')
plt.plot(df['DATE'], df['DailyAverageRelativeHumidity'], label='Relative Humidity (%)', color='green')
plt.plot(df['DATE'], df['DailyAverageSeaLevelPressure'], label='Sea Level Pressure (hPa)', color='orange')
plt.plot(df['DATE'], df['DailyAverageStationPressure'], label='Station Pressure (hPa)', color='purple')
plt.plot(df['DATE'], df['DailyAverageWetBulbTemperature'], label='Wet Bulb Temperature (°F)', color='cyan')
plt.plot(df['DATE'], df['DailyAverageWindSpeed'], label='Wind Speed (mph)', color='magenta')
plt.title('Daily Average Meteorological Parameters')
plt.xlabel('Date')
plt.ylabel('Value')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""ANAMOLY DETECTION"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame containing the data
df['DATE'] = pd.to_datetime(df['DATE'])
df.set_index('DATE', inplace=True)

columns_for_anomaly_detection = ['DailyAverageDryBulbTemperature',
                                 'DailyAverageRelativeHumidity',
                                 'DailyAverageSeaLevelPressure',
                                 'DailyAverageWindSpeed']

z_scores = (df[columns_for_anomaly_detection] - df[columns_for_anomaly_detection].mean()) / df[columns_for_anomaly_detection].std()
threshold = 3

# Plot each column separately
for column in columns_for_anomaly_detection:
    plt.figure(figsize=(10, 6))
    anomalies = df.index[np.abs(z_scores[column]) > threshold]
    plt.plot(df.index, df[column], label=column)
    plt.scatter(anomalies, df.loc[anomalies, column], color='red', label='Anomalies')
    plt.title(f'Anomaly Detection for {column}')
    plt.xlabel('Date')
    plt.ylabel('Value')
    plt.legend()
    plt.show()

"""REGRESSION ANALYSIS"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
target_variable = 'DailyAverageSeaLevelPressure'
features = ['DailyAverageDewPointTemperature',
       'DailyAverageDryBulbTemperature', 'DailyAverageRelativeHumidity',
        'DailyAverageStationPressure',
       'DailyAverageWetBulbTemperature', 'DailyAverageWindSpeed',
       'DailyCoolingDegreeDays', 'DailyDepartureFromNormalAverageTemperature',
       'DailyHeatingDegreeDays', 'DailyMaximumDryBulbTemperature',
       'DailyMinimumDryBulbTemperature', 'DailyPeakWindDirection',
       'DailyPeakWindSpeed', 'DailySustainedWindDirection',
       'DailySustainedWindSpeed', 'Sunrise', 'Sunset']
X = df[features]
y = df[target_variable]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print('R-squared:', r2)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)